#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
22a23,25
> #include <cstring>
> #include <iostream>  //DEBUG
> 
26,32c29,33
< processor_t::processor_t(const char* isa, const char* priv, const char* varch,
<                          simif_t* sim, uint32_t id, bool halt_on_reset,
<                          FILE* log_file, std::ostream& sout_)
<   : debug(false), halt_request(HR_NONE), sim(sim), id(id), xlen(0),
<   histogram_enabled(false), log_commits_enabled(false),
<   log_file(log_file), sout_(sout_.rdbuf()), halt_on_reset(halt_on_reset),
<   extension_table(256, false), impl_table(256, false), last_pc(1), executions(1)
---
> processor_t::processor_t(const char* isa, const char* priv, const char* varch, simif_t* sim,
>                          uint32_t pid, bool halt_on_reset,
>                          std::ostream& sout_)
> : debug(false), halt_request(HR_NONE), sim(sim), state(pid), id(pid), xlen(0),
>  sout_(sout_.rdbuf()), halt_on_reset(halt_on_reset), extension_table(256, false), impl_table(256, false), last_pc(1), executions(1)
61,69d61
< #ifdef RISCV_ENABLE_HISTOGRAM
<   if (histogram_enabled)
<   {
<     fprintf(stderr, "PC Histogram size:%zu\n", pc_histogram.size());
<     for (auto it : pc_histogram)
<       fprintf(stderr, "%0" PRIx64 " %" PRIu64 "\n", it.first, it.second);
<   }
< #endif
< 
335c327
< void state_t::reset(processor_t* const proc, reg_t max_isa)
---
> void state_t::reset(processor_t* const proc, reg_t max_isa, uint32_t id)
337a330,331
>   prv = PRV_M;
>   pid = id;
339a334,335
>   XPR.set_pid(id);
>   FPR.set_pid(id);
345d340
<   prv = PRV_M;
483a479
>   update_generator_register(p->id, "vtype", vtype, 0xffffffffffffffff, "write");
484a481,483
> 
>   //std::cout << "WARNING, vtype is hardcoded in the simulator (processor.cc, processor_t::vectorUnit_t::reset()), replace with vsetvl(i) ASAP." << std::endl;
>   //set_vl(0, 0, 0, 0b0001000); // this could be changed to force a legal configuration 
505a505,506
> 
>     update_generator_register(p->id, "vtype", vtype, 0xffffffffffffffff, "write");
518a520,521
> 
>   update_generator_register(p->id, "vl", vl, 0xffffffffffffffff, "write");
519a523
>   update_generator_register(p->id, "vstart", vstart, 0xffffffffffffffff, "write");
523a528,555
> reg_t processor_t::vectorUnit_t::set_vl_api(reg_t reqVL, reg_t newType){
>   int new_vlmul = 0;
>   if (vtype != newType){
>     vtype = newType;
>     vsew = 1 << (extract64(newType, 3, 3) + 3);
>     new_vlmul = int8_t(extract64(newType, 0, 3) << 5) >> 5;
>     vflmul = new_vlmul >= 0 ? 1 << new_vlmul : 1.0 / (1 << -new_vlmul);
>     vlmax = (VLEN/vsew) * vflmul;
>     vta = extract64(newType, 6, 1);
>     vma = extract64(newType, 7, 1);
> 
>     vill = !(vflmul >= 0.125 && vflmul <= 8)
>            || vsew > std::min(vflmul, 1.0f) * ELEN
>            || (newType >> 8) != 0;
> 
>     if (vill) {
>       vlmax = 0;
>       vtype = UINT64_MAX << (p->get_xlen() - 1);
>     }
>   }
> 
>   vl = reqVL;
> 
>   vstart = 0;
>   //setvl_count++;
>   return vl;
> }
> 
535,541d566
< #ifndef RISCV_ENABLE_HISTOGRAM
<   if (value) {
<     fprintf(stderr, "PC Histogram support has not been properly enabled;");
<     fprintf(stderr, " please re-build the riscv-isa-sim project using \"configure --enable-histogram\".\n");
<     abort();
<   }
< #endif
544,550d568
< #ifdef RISCV_ENABLE_COMMITLOG
< void processor_t::enable_log_commits()
< {
<   log_commits_enabled = true;
< }
< #endif
< 
554c572
<   state.reset(this, max_isa);
---
>   state.reset(this, max_isa, id);
639a658
>   //need to add register read callback calls here
718a738,744
>   update_generator_register(this->id, "privilege", prv, 0x3ull, "write");
> }
> 
> void processor_t::set_privilege_api(reg_t prv)
> {
>   mmu->flush_tlb();
>   state.prv = legalize_privilege(prv);
743,748c769,774
<   state.debug_mode = true;
<   state.dcsr.cause = cause;
<   state.dcsr.prv = state.prv;
<   set_privilege(PRV_M);
<   state.dpc = state.pc;
<   state.pc = DEBUG_ROM_ENTRY;
---
> //  state.debug_mode = true;
> //  state.dcsr.cause = cause;
> //  state.dcsr.prv = state.prv;
> //  set_privilege(PRV_M);
> //  state.dpc = state.pc;
> //  state.pc = DEBUG_ROM_ENTRY;
763,783d788
<   if (debug) {
<     std::stringstream s; // first put everything in a string, later send it to output
<     s << "core " << std::dec << std::setfill(' ') << std::setw(3) << id
<       << ": exception " << t.name() << ", epc 0x"
<       << std::hex << std::setfill('0') << std::setw(max_xlen/4) << zext(epc, max_xlen) << std::endl;
<     if (t.has_tval())
<        s << "core " << std::dec << std::setfill(' ') << std::setw(3) << id
<          << ":           tval 0x" << std::hex << std::setfill('0') << std::setw(max_xlen/4)
<          << zext(t.get_tval(), max_xlen) << std::endl;
<     debug_output_log(&s);
<   }
< 
<   if (state.debug_mode) {
<     if (t.cause() == CAUSE_BREAKPOINT) {
<       state.pc = DEBUG_ROM_ENTRY;
<     } else {
<       state.pc = DEBUG_ROM_TVEC;
<     }
<     return;
<   }
< 
788c793
<     enter_debug_mode(DCSR_CAUSE_SWBP);
---
>     //enter_debug_mode(DCSR_CAUSE_SWBP);
799a805,808
> 
>     update_generator_register(this->id, "mideleg", state.mideleg->read(), 0xffffffffffffffffull, "read");
>     update_generator_register(this->id, "mideleg", state.hideleg, 0xffffffffffffffffull, "read");
> 
803a813,815
> 
>     update_generator_register(this->id, "medeleg", state.medeleg->read(), 0xffffffffffffffffull, "read");
>     update_generator_register(this->id, "hedeleg", state.hedeleg, 0xffffffffffffffffull, "read");
829a842,851
>     update_generator_register(this->id, "stvec", state.stvec->read(), 0xffffffffffffffffull, "read");
>     update_generator_register(this->id, "PC", state.pc, 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "scause", state.scause->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "sepc", state.sepc->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "stval", state.stval->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "vstart", VU.vstart, 0xffffffffffffffffull, "write");
> 
>     SimException enter_s(state.scause->read(), state.stval->read(), "enter_s", epc);
>     update_exception_event(&enter_s);
> 
854a877,886
>     update_generator_register(this->id, "mtvec", state.mtvec->read(), 0xffffffffffffffffull, "read");
>     update_generator_register(this->id, "PC", state.pc, 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "mcause", state.mcause->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "mepc", state.mepc->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "mtval", state.mtval->read(), 0xffffffffffffffffull, "write");
>     update_generator_register(this->id, "vstart", VU.vstart, 0xffffffffffffffffull, "write");
> 
>     SimException enter_m(state.mcause->read(), state.mtval->read(), "enter_m", epc);
>     update_exception_event(&enter_m);
> 
870,892d901
<     std::stringstream s;  // first put everything in a string, later send it to output
< 
< #ifdef RISCV_ENABLE_COMMITLOG
<     const char* sym = get_symbol(state.pc);
<     if (sym != nullptr)
<     {
<       s << "core " << std::dec << std::setfill(' ') << std::setw(3) << id
<         << ": >>>>  " << sym << std::endl;
<     }
< #endif
< 
<     if (executions != 1) {
<       s << "core " << std::dec << std::setfill(' ') << std::setw(3) << id
<         << ": Executed " << executions << " times" << std::endl;
<     }
< 
<     s << "core " << std::dec << std::setfill(' ') << std::setw(3) << id
<       << std::hex << ": 0x" << std::setfill('0') << std::setw(max_xlen/4)
<       << zext(state.pc, max_xlen) << " (0x" << std::setw(8) << bits << ") "
<       << disassembler->disassemble(insn) << std::endl;
< 
<     debug_output_log(&s);
< 
922a932,935
> 
>   reg_t effective_value = 0;
>   std::string text_name = std::string(csr_name(which));
> 
925a939,950
> 
>     // TODO(Noah): Improve this logic when a more general mechanism, i.e. one that could potentially
>     // handle other alias registers, can be devised. Since sstatus is a restricted alias of mstatus,
>     // we need to send the update for the underlying mstatus register.
>     effective_value = search->second->read();
>     if (search->second == STATE.sstatus) {
>       text_name = "mstatus";
>       effective_value = STATE.mstatus->read();
>     }
> 
>     update_generator_register(this->id, text_name.c_str(), effective_value, 0xffffffffffffffffull, "write");
> 
932a958
>       effective_value = val;
936a963
>       effective_value = state.fflags;
940a968
>       effective_value = state.frm;
945a974
>       effective_value = (state.fflags << FSR_AEXC_SHIFT) | (state.frm << FSR_RD_SHIFT);
950a980
>       effective_value = (VU.vxsat << VCSR_VXSAT_SHIFT) | (VU.vxrm << VCSR_VXRM_SHIFT);
957a988,989
> 
>       effective_value = state.minstret;
966a999
>       effective_value = state.minstret;
969,970c1002,1015
<     case CSR_MTVAL2: state.mtval2 = val; break;
<     case CSR_MTINST: state.mtinst = val; break;
---
>     case CSR_MTVAL2:
>     {
>         state.mtval2 = val;
> 
>         effective_value = state.mtval2;
>         break;
>     }
>     case CSR_MTINST:
>     {
>         state.mtinst = val;
> 
>         effective_value = state.mtinst;
>         break;
>     }
985a1031
>       effective_value = state.hedeleg;
990a1037
>       effective_value = state.hideleg;
997a1045
>       effective_value = state.htval;
1000a1049
>       effective_value = state.htinst;
1018a1068
>       effective_value = state.hgatp;
1023a1074
>         effective_value = state.tselect;
1048a1100,1102
> 
>         // If mcontrol_t had a more clear size it may make sense to bitcopy its contents.
>         effective_value = val;
1056a1111,1112
>         
>         effective_value = val;
1062d1117
<       // TODO: ndreset and fullreset
1067a1123,1124
>         
>       memcpy(&effective_value, &(state.dcsr), sizeof(dcsr_t));
1070a1128,1129
> 
>       effective_value = state.dpc;
1073a1133,1134
> 
>       effective_value = state.dscratch0;
1076a1138,1139
>     
>       effective_value = state.dscratch1;
1080a1144,1145
> 
>       effective_value = VU.vstart;
1084a1150,1151
> 
>       effective_value = VU.vxsat;
1088a1156,1397
> 
>       effective_value = VU.vxrm;
>       break;
>   }
> 
> #if defined(RISCV_ENABLE_COMMITLOG)
>   switch (which)
>   {
>     case CSR_FFLAGS:
>       LOG_CSR(CSR_FFLAGS);
>       break;
>     case CSR_FRM:
>       LOG_CSR(CSR_FRM);
>       break;
>     case CSR_FCSR:
>       LOG_CSR(CSR_FFLAGS);
>       LOG_CSR(CSR_FRM);
>       LOG_CSR(CSR_FCSR);
>       break;
>     case CSR_VCSR:
>       LOG_CSR(CSR_VXSAT);
>       LOG_CSR(CSR_VXRM);
>       break;
> 
>     case CSR_VSTART:
>       LOG_CSR(CSR_VSTART);
>       break;
>     case CSR_VXSAT:
>       LOG_CSR(CSR_VXSAT);
>       break;
>     case CSR_VXRM:
>       LOG_CSR(CSR_VXRM);
>       break;
> 
>     case CSR_MINSTRET:
>     case CSR_MCYCLE:
>     case CSR_MINSTRETH:
>     case CSR_MCYCLEH:
>     case CSR_TSELECT:
>     case CSR_TDATA1:
>     case CSR_TDATA2:
>     case CSR_DCSR:
>     case CSR_DPC:
>     case CSR_DSCRATCH0:
>     case CSR_DSCRATCH1:
>     case CSR_SENTROPY:
>       LOG_CSR(which);
>       break;
>   }
> #endif
> 
>   update_generator_register(this->id, text_name.c_str(), effective_value, 0xffffffffffffffffull, "write");
> }
> 
> void processor_t::set_csr_api(int which, reg_t val)
> {
> #if defined(RISCV_ENABLE_COMMITLOG)
> #define LOG_CSR(rd) \
>   STATE.log_reg_write[((which) << 4) | 4] = {get_csr(rd), 0};
> #else
> #define LOG_CSR(rd)
> #endif
> 
>   val = zext_xlen(val);
>   reg_t supervisor_ints = extension_enabled('S') ? MIP_SSIP | MIP_STIP | MIP_SEIP : 0;
>   reg_t vssip_int = extension_enabled('H') ? MIP_VSSIP : 0;
>   reg_t hypervisor_ints = extension_enabled('H') ? MIP_HS_MASK : 0;
>   reg_t coprocessor_ints = (reg_t)any_custom_extensions() << IRQ_COP;
>   reg_t delegable_ints = supervisor_ints | coprocessor_ints;
>   reg_t all_ints = delegable_ints | hypervisor_ints | MIP_MSIP | MIP_MTIP | MIP_MEIP;
>   auto search = state.csrmap.find(which);
>   if (search != state.csrmap.end()) {
>     search->second->write(val);
>     return;
>   }
> 
>   switch (which)
>   {
>     case CSR_SENTROPY:
>       es.set_sentropy(val);
>       break;
>     case CSR_FFLAGS:
>       //dirty_fp_state;
>       state.fflags = val & (FSR_AEXC >> FSR_AEXC_SHIFT);
>       break;
>     case CSR_FRM:
>       //dirty_fp_state;
>       state.frm = val & (FSR_RD >> FSR_RD_SHIFT);
>       break;
>     case CSR_FCSR:
>       //dirty_fp_state;
>       state.fflags = (val & FSR_AEXC) >> FSR_AEXC_SHIFT;
>       state.frm = (val & FSR_RD) >> FSR_RD_SHIFT;
>       break;
>     case CSR_VCSR:
>       //dirty_vs_state;
>       VU.vxsat = (val & VCSR_VXSAT) >> VCSR_VXSAT_SHIFT;
>       VU.vxrm = (val & VCSR_VXRM) >> VCSR_VXRM_SHIFT;
>       break;
>     case CSR_MINSTRET:
>     case CSR_MCYCLE:
>       if (xlen == 32)
>         state.minstret = (state.minstret >> 32 << 32) | (val & 0xffffffffU);
>       else
>         state.minstret = val;
>       // The ISA mandates that if an instruction writes instret, the write
>       // takes precedence over the increment to instret.  However, Spike
>       // unconditionally increments instret after executing an instruction.
>       // Correct for this artifact by decrementing instret here.
>       state.minstret--;
>       break;
>     case CSR_MINSTRETH:
>     case CSR_MCYCLEH:
>       state.minstret = (val << 32) | (state.minstret << 32 >> 32);
>       state.minstret--; // See comment above.
>       break;
>     case CSR_MTVAL2: state.mtval2 = val; break;
>     case CSR_MTINST: state.mtinst = val; break;
>     case CSR_HEDELEG: {
>       reg_t mask =
>         (1 << CAUSE_MISALIGNED_FETCH) |
>         (1 << CAUSE_FETCH_ACCESS) |
>         (1 << CAUSE_ILLEGAL_INSTRUCTION) |
>         (1 << CAUSE_BREAKPOINT) |
>         (1 << CAUSE_MISALIGNED_LOAD) |
>         (1 << CAUSE_LOAD_ACCESS) |
>         (1 << CAUSE_MISALIGNED_STORE) |
>         (1 << CAUSE_STORE_ACCESS) |
>         (1 << CAUSE_USER_ECALL) |
>         (1 << CAUSE_FETCH_PAGE_FAULT) |
>         (1 << CAUSE_LOAD_PAGE_FAULT) |
>         (1 << CAUSE_STORE_PAGE_FAULT);
>       state.hedeleg = (state.hedeleg & ~mask) | (val & mask);
>       break;
>     }
>     case CSR_HIDELEG: {
>       reg_t mask = MIP_VS_MASK;
>       state.hideleg = (state.hideleg & ~mask) | (val & mask);
>       break;
>     }
>     case CSR_HGEIE:
>       /* Ignore */
>       break;
>     case CSR_HTVAL:
>       state.htval = val;
>       break;
>     case CSR_HTINST:
>       state.htinst = val;
>       break;
>     case CSR_HGATP: {
>       mmu->flush_tlb();
> 
>       reg_t mask;
>       if (max_xlen == 32) {
>         mask = HGATP32_PPN | HGATP32_MODE;
>       } else {
>         mask = HGATP64_PPN & ((reg_t(1) << (MAX_PADDR_BITS - PGSHIFT)) - 1);
> 
>         if (get_field(val, HGATP64_MODE) == HGATP_MODE_OFF ||
>             get_field(val, HGATP64_MODE) == HGATP_MODE_SV39X4 ||
>             get_field(val, HGATP64_MODE) == HGATP_MODE_SV48X4)
>           mask |= HGATP64_MODE;
>       }
>       mask &= ~(reg_t)3;
> 
>       state.hgatp = val & mask;
>       break;
>     }
>     case CSR_TSELECT:
>       if (val < state.num_triggers) {
>         state.tselect = val;
>       }
>       break;
>     case CSR_TDATA1:
>       {
>         mcontrol_t *mc = &state.mcontrol[state.tselect];
>         if (mc->dmode && !state.debug_mode) {
>           break;
>         }
>         mc->dmode = get_field(val, MCONTROL_DMODE(xlen));
>         mc->select = get_field(val, MCONTROL_SELECT);
>         mc->timing = get_field(val, MCONTROL_TIMING);
>         mc->action = (mcontrol_action_t) get_field(val, MCONTROL_ACTION);
>         mc->chain = get_field(val, MCONTROL_CHAIN);
>         mc->match = (mcontrol_match_t) get_field(val, MCONTROL_MATCH);
>         mc->m = get_field(val, MCONTROL_M);
>         mc->h = get_field(val, MCONTROL_H);
>         mc->s = get_field(val, MCONTROL_S);
>         mc->u = get_field(val, MCONTROL_U);
>         mc->execute = get_field(val, MCONTROL_EXECUTE);
>         mc->store = get_field(val, MCONTROL_STORE);
>         mc->load = get_field(val, MCONTROL_LOAD);
>         // Assume we're here because of csrw.
>         if (mc->execute)
>           mc->timing = 0;
>         trigger_updated();
>       }
>       break;
>     case CSR_TDATA2:
>       if (state.mcontrol[state.tselect].dmode && !state.debug_mode) {
>         break;
>       }
>       if (state.tselect < state.num_triggers) {
>         state.tdata2[state.tselect] = val;
>       }
>       break;
>     case CSR_DCSR:
>       state.dcsr.prv = get_field(val, DCSR_PRV);
>       state.dcsr.step = get_field(val, DCSR_STEP);
>       // TODO: ndreset and fullreset
>       state.dcsr.ebreakm = get_field(val, DCSR_EBREAKM);
>       state.dcsr.ebreakh = get_field(val, DCSR_EBREAKH);
>       state.dcsr.ebreaks = get_field(val, DCSR_EBREAKS);
>       state.dcsr.ebreaku = get_field(val, DCSR_EBREAKU);
>       state.dcsr.halt = get_field(val, DCSR_HALT);
>       break;
>     case CSR_DPC:
>       state.dpc = val & ~(reg_t)1;
>       break;
>     case CSR_DSCRATCH0:
>       state.dscratch0 = val;
>       break;
>     case CSR_DSCRATCH1:
>       state.dscratch1 = val;
>       break;
>     case CSR_VSTART:
>       //dirty_vs_state;
>       VU.vstart = val & (VU.get_vlen() - 1);
>       break;
>     case CSR_VXSAT:
>       //dirty_vs_state;
>       VU.vxsat = val & 0x1ul;
>       break;
>     case CSR_VXRM:
>       //dirty_vs_state;
>       VU.vxrm = val & 0x3ul;
>       break;
>     case CSR_VL:
>       VU.vl = VU.set_vl_api(val, VU.vtype);
>       break;
>     case CSR_VTYPE:
>       VU.set_vl_api(VU.vl, val);
1166a1476
>   std::string text_name = std::string(csr_name(which));
1176c1486,1499
<     return search->second->read();
---
>     res = search->second->read();
> 
>     // TODO(Noah): Improve this logic when a more general mechanism, i.e. one that could potentially
>     // handle other alias registers, can be devised. Since sstatus is a restricted alias of mstatus,
>     // we need to send the update for the underlying mstatus register.
>     reg_t update_val = res;
>     if (search->second == STATE.sstatus) {
>       text_name = "mstatus";
>       update_val = STATE.mstatus->read();
>     }
> 
>     update_generator_register(this->id, text_name.c_str(), update_val, 0xffffffffffffffffull, "read");
> 
>     return res;
1412a1736,1737
>   update_generator_register(this->id, text_name.c_str(), res, 0xffffffffffffffffull, "read");
> 
1415a1741,1974
> reg_t processor_t::get_csr_api(int which)
> {
> #define mcounteren_ok(__which) \
> ({ \
>   bool __ctr_ok = true; \
>   if (state.prv < PRV_M) \
>     __ctr_ok = (state.mcounteren->read() >> (__which & 31)) & 1;        \
>   __ctr_ok; \
> })
> #define hcounteren_ok(__which) \
> ({ \
>   bool __ctr_ok = true; \
>   if (state.v) \
>     __ctr_ok = (state.hcounteren->read() >> (__which & 31)) & 1;        \
>   __ctr_ok; \
> })
> #define scounteren_ok(__which) \
> ({ \
>   bool __ctr_ok = true; \
>   if (extension_enabled('S') && state.prv < PRV_S) \
>     __ctr_ok = (state.scounteren->read() >> (__which & 31)) & 1;        \
>   __ctr_ok; \
> })
> 
>   reg_t res = 0;
> #define ret(n) do { \
>     res = (n); \
>     goto out; \
>   } while (false)
> 
>   auto search = state.csrmap.find(which);
>   if (search != state.csrmap.end()) {
>     return search->second->read();
>   }
> 
>   switch (which)
>   {
>     case CSR_SENTROPY:
>       // TODO(Noah): Determine what must be done here to allow reading sentropy without side effects
>       // before support for Zkr is enabled. A comment in the Spike code indicates the register is
>       // modified when reading it.
>       if (!extension_enabled(EXT_ZKR))
>         break;
>       ret(es.get_sentropy());
>     case CSR_FFLAGS:
>       ret(state.fflags);
>     case CSR_FRM:
>       ret(state.frm);
>     case CSR_FCSR:
>       ret((state.fflags << FSR_AEXC_SHIFT) | (state.frm << FSR_RD_SHIFT));
>     case CSR_VCSR:
>       ret((VU.vxsat << VCSR_VXSAT_SHIFT) | (VU.vxrm << VCSR_VXRM_SHIFT));
>     case CSR_INSTRET:
>     case CSR_CYCLE:
>     case CSR_HPMCOUNTER3 ... CSR_HPMCOUNTER31:
>       if (which == CSR_INSTRET || which == CSR_CYCLE)
>         ret(state.minstret);
>       else
>         ret(0);
>     case CSR_MINSTRET:
>     case CSR_MCYCLE:
>     case CSR_MHPMCOUNTER3 ... CSR_MHPMCOUNTER31:
>     case CSR_MHPMEVENT3 ... CSR_MHPMEVENT31:
>       if (which == CSR_MINSTRET || which == CSR_MCYCLE)
>         ret(state.minstret);
>       else
>         ret(0);
>     case CSR_INSTRETH:
>     case CSR_CYCLEH:
>     case CSR_HPMCOUNTER3H ... CSR_HPMCOUNTER31H:
>       if (which == CSR_INSTRETH || which == CSR_CYCLEH)
>         ret(state.minstret >> 32);
>       else
>         ret(0);
>     case CSR_MINSTRETH:
>     case CSR_MCYCLEH:
>     case CSR_MHPMCOUNTER3H ... CSR_MHPMCOUNTER31H:
>       if (which == CSR_MINSTRETH || which == CSR_MCYCLEH)
>         ret(state.minstret >> 32);
>       else
>         ret(0);
>     case CSR_MCOUNTINHIBIT: ret(0);
>     case CSR_MSTATUSH:
>       ret((state.mstatus->read() >> 32) & (MSTATUSH_SBE | MSTATUSH_MBE));
>     case CSR_MTVAL2:
>       ret(state.mtval2);
>     case CSR_MTINST:
>       ret(state.mtinst);
>     case CSR_MARCHID: ret(5);
>     case CSR_MIMPID: ret(0);
>     case CSR_MVENDORID: ret(0);
>     case CSR_MHARTID: ret(id);
>     case CSR_HEDELEG: ret(state.hedeleg);
>     case CSR_HIDELEG: ret(state.hideleg);
>     case CSR_HGEIE: ret(0);
>     case CSR_HTVAL: ret(state.htval);
>     case CSR_HTINST: ret(state.htinst);
>     case CSR_HGATP: {
>       ret(state.hgatp);
>     }
>     case CSR_HGEIP: ret(0);
>     case CSR_TSELECT: ret(state.tselect);
>     case CSR_TDATA1:
>       if (state.tselect < state.num_triggers) {
>         reg_t v = 0;
>         mcontrol_t *mc = &state.mcontrol[state.tselect];
>         v = set_field(v, MCONTROL_TYPE(xlen), mc->type);
>         v = set_field(v, MCONTROL_DMODE(xlen), mc->dmode);
>         v = set_field(v, MCONTROL_MASKMAX(xlen), mc->maskmax);
>         v = set_field(v, MCONTROL_SELECT, mc->select);
>         v = set_field(v, MCONTROL_TIMING, mc->timing);
>         v = set_field(v, MCONTROL_ACTION, mc->action);
>         v = set_field(v, MCONTROL_CHAIN, mc->chain);
>         v = set_field(v, MCONTROL_MATCH, mc->match);
>         v = set_field(v, MCONTROL_M, mc->m);
>         v = set_field(v, MCONTROL_H, mc->h);
>         v = set_field(v, MCONTROL_S, mc->s);
>         v = set_field(v, MCONTROL_U, mc->u);
>         v = set_field(v, MCONTROL_EXECUTE, mc->execute);
>         v = set_field(v, MCONTROL_STORE, mc->store);
>         v = set_field(v, MCONTROL_LOAD, mc->load);
>         ret(v);
>       } else {
>         ret(0);
>       }
>       break;
>     case CSR_TDATA2:
>       if (state.tselect < state.num_triggers) {
>         ret(state.tdata2[state.tselect]);
>       } else {
>         ret(0);
>       }
>       break;
>     case CSR_TDATA3: ret(0);
>     case CSR_DCSR:
>       {
>         uint32_t v = 0;
>         v = set_field(v, DCSR_XDEBUGVER, 1);
>         v = set_field(v, DCSR_EBREAKM, state.dcsr.ebreakm);
>         v = set_field(v, DCSR_EBREAKH, state.dcsr.ebreakh);
>         v = set_field(v, DCSR_EBREAKS, state.dcsr.ebreaks);
>         v = set_field(v, DCSR_EBREAKU, state.dcsr.ebreaku);
>         v = set_field(v, DCSR_STOPCYCLE, 0);
>         v = set_field(v, DCSR_STOPTIME, 0);
>         v = set_field(v, DCSR_CAUSE, state.dcsr.cause);
>         v = set_field(v, DCSR_STEP, state.dcsr.step);
>         v = set_field(v, DCSR_PRV, state.dcsr.prv);
>         ret(v);
>       }
>     case CSR_DPC:
>       ret(state.dpc & pc_alignment_mask());
>     case CSR_DSCRATCH0:
>       ret(state.dscratch0);
>     case CSR_DSCRATCH1:
>       ret(state.dscratch1);
>     case CSR_VSTART:
>       ret(VU.vstart);
>     case CSR_VXSAT:
>       ret(VU.vxsat);
>     case CSR_VXRM:
>       ret(VU.vxrm);
>     case CSR_VL:
>       ret(VU.vl);
>     case CSR_VTYPE:
>       ret(VU.vtype);
>     case CSR_VLENB:
>       ret(VU.vlenb);
>   }
> 
> #undef ret
> 
>   // If we get here, the CSR doesn't exist.
>   return 0xDEADBEEFDEADBEEF;
> 
> out:
>   return res;
> }
> 
> bool processor_t::set_pc_api(const std::string& name, const uint8_t* bytes, size_t len) //len advertises the size of the buffer
> {
>     if(bytes == nullptr)
>     {
>         return false;
>     }
> 
>     if(name == std::string("PC") || name == std::string("pc"))
>     {
>         if(len != sizeof(state.pc))
>         {
>             return false;    
>         }
>         else
>         {
>             memcpy(&(state.pc), bytes, len);
>             return true;
>         }
>     }
>     else
>     {
>         return false;        
>     }
> }
> 
> bool processor_t::retrieve_pc_api(uint8_t* bytes, const std::string& name, size_t len) //len advertises the size of the buffer
> {
> 
>     if(bytes == nullptr)
>     {
>         return false;
>     }
> 
>     if(name == std::string("PC") || name == std::string("pc"))
>     {
>         if(len != sizeof(state.pc))
>         {
>             return false;    
>         }
>         else
>         {
>             memcpy(bytes, &(state.pc), len);
>             return true;
>         }
>     }
>     else
>     {
>         return false;        
>     }
> }
> 
> void processor_t::retrieve_privilege_api(reg_t* val)
> {
>   *val = state.prv;
> }
> 
1518a2078
>         update_generator_register(this->id, "mip", state.mip->read(), 0xffffffffffffffff, "read");
1533a2094
>         update_generator_register(this->id, "mip", state.mip->read(), 0xffffffffffffffff, "write");
