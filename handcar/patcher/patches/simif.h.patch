#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
7a8,9
> #include "Force_Memory.h"
> 
12,17c14
<   // should return NULL for MMIO addresses
<   virtual char* addr_to_mem(reg_t addr) = 0;
<   // used for MMIO addresses
<   virtual bool mmio_load(reg_t addr, size_t len, uint8_t* bytes) = 0;
<   virtual bool mmio_store(reg_t addr, size_t len, const uint8_t* bytes) = 0;
<   // Callback for processors to let the simulation know they were reset.
---
>   virtual ~simif_t() = default;
20,21c17,28
<   virtual const char* get_symbol(uint64_t addr) = 0;
< 
---
>   // to support sparse memory model
>   virtual uint64_t sparse_read(reg_t paddr, size_t len) = 0;
>   virtual void sparse_read_partially_initialized(reg_t paddr, size_t len, uint8_t* bytes) = 0;
>   virtual void sparse_write(reg_t paddr, const uint8_t* bytes, size_t len) = 0;
>   virtual void sparse_write(reg_t paddr, uint64_t value, size_t len) = 0;
>   virtual void sparse_write_with_initialization(reg_t paddr, const uint8_t* bytes, size_t len) = 0;
>   virtual bool sparse_is_pa_initialized(reg_t paddr, size_t len) = 0;
>   virtual void sparse_initialize_pa(reg_t paddr, reg_t value, size_t numBytes, Force::EMemDataType type) = 0;
>   virtual void sparse_initialize_pa(reg_t paddr, const uint8_t* data, const uint8_t* attrs, uint32_t nBytes, Force::EMemDataType type) = 0;
>   virtual void sparse_reserve(reg_t paddr, size_t numBytes) = 0;
>   virtual void sparse_unreserve(reg_t paddr, size_t numBytes) = 0;
>   virtual bool sparse_is_reserved(reg_t paddr, size_t numBytes) = 0;
